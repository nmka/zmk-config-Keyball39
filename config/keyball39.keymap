/dts-v1/;
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

#define DEFAULT 0
#define NUM     1
#define FUN     2
#define MOUSE   3

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q      &kp W         &kp E     &kp R         &kp T                                    &kp Y            &kp U  &kp I      &kp O    &kp P
&mt LCTRL A &mt LALT S   &mt LCMD D &mt LSHFT F  &kp G                                    &kp H            &mt RSHFT J &mt RCMD K &mt RALT L &mt RCTRL SEMI
&kp Z      &kp X         &kp C     &kp V         &kp B                                    &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LALT  &kp ESCAPE   &lt 3 SPACE  &kp TAB    &kp ENTER  &lt 1 BACKSPACE                             &kp DELETE
            >;

        number_layer {
            label = "NUM";
            bindings = <
&kp N1           &kp N2        &kp N3        &kp N4        &kp N5                       &kp N6          &kp N7         &kp N8            &kp N9                    &kp N0
&mt LCTRL GRAVE  &mt LALT SEMI &mt LCMD SQT  &mt LSHFT COMMA &kp PIPE                   &kp MINUS       &mt RSHFT EQUAL &mt RCMD LEFT_BRACKET &mt RALT RIGHT_BRACKET &mt RCTRL DOT
&trans           &trans        &trans        &trans        &trans                       &trans          &trans         &trans            &trans                &kp NON_US_BACKSLASH
&trans           &trans        &trans        &trans        &trans        &trans  &trans  &kp DELETE                                                             &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &none                   &kp C_MUTE     &kp C_VOL_UP   &kp C_VOL_DN   &kp C_PREV     &kp C_NEXT
&kp F5  &kp F6   &kp F7   &kp F8   &none                   &kp CAPS       &kp INSERT     &kp PSCRN      &kp SLCK       &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &none                   &kp C_BRI_UP   &kp C_BRI_DN   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2
&trans  &trans   &trans   &trans   &trans  &trans  &trans  &kp LSHFT                                                 &bt BT_CLR
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2          &kp N3        &kp N4     &kp N5                  &kp N6         &kp N7         &kp N8        &kp N9          &kp N0
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                   &none          &mkp LCLK      &mkp MCLK     &mkp RCLK       &none
&kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &none                   &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP  &msc SCRL_RIGHT &none
&none           &trans          &trans        &trans     &trans  &trans  &trans  &trans                                                     &none
            >;
        };
    };
};

